// Файл "tsconfig.json":
// - устанавливает корневой каталог проекта TypeScript;
// - выполняет настройку параметров компиляции;
// - устанавливает файлы проекта.
// Присутствие файла "tsconfig.json" в папке указывает TypeScript, что это корневая папка проекта.
// Внутри "tsconfig.json" указываются настройки компилятора TypeScript и корневые файлы проекта.
// Программа компилятора "tsc" ищет файл "tsconfig.json" сначала в папке, где она расположена, затем поднимается выше и ищет в родительских папках согласно их вложенности друг в друга.
// Команда "tsc --project C:\path\to\my\project\folder" берет файл "tsconfig.json" из папки, расположенной по данному пути.
// Файл "tsconfig.json" может быть полностью пустым, тогда компилятор скомпилирует все файлы с настройками заданными по умолчанию.
{
  // здесь все настройки, связанные с компилятором
  "compilerOptions": {
    "noImplicitAny": true, // Показывать ошибку, если где-то задан тип "any"
    "lib": [ // Набор библиотечных файлов полифилов, которые будут включены в итоговый выходной файл.
      "es6",
      "dom",
      "dom.iterable"
    ],
    "outDir": "dist", // Поместить все скомпилированные файлы в данную папку, согласно их вложенности в исходниках. Если задана опция "outFile", то опция "outDir" будет проигнорирована.
    "module": "commonjs", // Модульная система, которую будет использовать ваше собранное приложение
    "allowJs": false, // Разрешать ли компилировать файлы с JavaScript-кодом
    "sourceMap": true, // Создавать ли соответствующие source map файлы ".map"
    "target": "es6", // Версия стандарта ECMAScript, в которую будет скомпилирован код
    "jsx": "react-jsx", // Включать ли поддержку ".tsx" файлов?
    "experimentalDecorators": true, // Включить экспериментальную поддержку декораторов EcmaScript?
    "removeComments": true, // Удалить все комментарии из итогового файла.
    "noImplicitReturns": true, // Флаг проверяет, чтобы все ветки функции возвращали значение
    "baseUrl": ".", // Путь до базовой папки для поиска не относительных путей до файлов.
    "strictNullChecks": true, // Значения "null" и "undefined" могут быть присвоены только значениям данного типа и значениям только с типом "any"
    "moduleResolution": "node", // Определить способ поиска модулей в папках. Здесь всего две опции: node и classic. При этом classic в 99% не будет использоваться, так как это legacy
    "esModuleInterop": true, // За счёт добавления болерплейта в выходной код, позволяет импортировать CommonJS пакеты как ES6. Данный флаг по зависимости активирует allowSyntheticDefaultImports. Вместе они помогают писать импорты единообразно по всему проекту.
    "declaration": true, // Создавать ли соответствующие файлы ".d.ts"? Полезно для npm пакетов
    "noEmit": true,
    // При компиляции будут использованы только файлы описания типов ".d.ts" находящиеся в этой папке.
    "typeRoots": [
      "node_modules/@types",
      "types"
    ],
  },
  // Секция "include" позволяет скомпилировать все файлы, находящиеся в заданных папках
  "include": [
    "types",
    "src/**/*" // во всех папках и подпапках дериктории src
  ],
  // Секция "exclude" служит для того, чтобы исключать некоторые лишние пути или файлы
  "exclude": [
    "dist",
    "node_modules",
    "src/**/*.spec.ts"
  ]
}
